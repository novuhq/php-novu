<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace novu\Models\Errors;

use novu\Models\Components;
use novu\Utils;
class PayloadValidationExceptionDto
{
    /**
     * HTTP status code of the error response.
     *
     * @var float $statusCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('statusCode')]
    public float $statusCode;

    /**
     * Timestamp of when the error occurred.
     *
     * @var string $timestamp
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('timestamp')]
    public string $timestamp;

    /**
     * The path where the error occurred.
     *
     * @var string $path
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('path')]
    public string $path;

    /**
     * Value that failed validation
     *
     * @var string|float|bool|MessagePayloadValidationExceptionDto4|array<string|float|bool|array<string, mixed>|null>|null $message
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('message')]
    #[\Speakeasy\Serializer\Annotation\Type('string|float|bool|\novu\Models\Errors\MessagePayloadValidationExceptionDto4|array<string|float|bool|array<string, mixed>|null>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public string|float|bool|MessagePayloadValidationExceptionDto4|array|null $message = null;

    /**
     * Optional context object for additional error details.
     *
     * @var ?array<string, mixed> $ctx
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('ctx')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $ctx = null;

    /**
     * Optional unique identifier for the error, useful for tracking using Sentry and 
     *
     *       New Relic, only available for 500.
     *
     * @var ?string $errorId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('errorId')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $errorId = null;

    /**
     * Type identifier for payload validation errors
     *
     * @var string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    public string $type;

    /**
     * Array of detailed validation errors
     *
     * @var array<Components\PayloadValidationErrorDto> $errors
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('errors')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\novu\Models\Components\PayloadValidationErrorDto>')]
    public array $errors;

    /**
     * The JSON schema that was used for validation
     *
     * @var ?Schema $schema
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('schema')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Errors\Schema|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Schema $schema = null;

    /**
     * @param  float  $statusCode
     * @param  string  $timestamp
     * @param  string  $path
     * @param  string  $type
     * @param  array<Components\PayloadValidationErrorDto>  $errors
     * @param  ?array<string, mixed>  $ctx
     * @param  ?string  $errorId
     * @param  ?Schema  $schema
     * @param  string|float|bool|MessagePayloadValidationExceptionDto4|array<string|float|bool|array<string, mixed>|null>|null  $message
     * @phpstan-pure
     */
    public function __construct(float $statusCode, string $timestamp, string $path, string $type, array $errors, ?array $ctx = null, ?string $errorId = null, ?Schema $schema = null, string|float|bool|MessagePayloadValidationExceptionDto4|array|null $message = null)
    {
        $this->statusCode = $statusCode;
        $this->timestamp = $timestamp;
        $this->path = $path;
        $this->message = $message;
        $this->ctx = $ctx;
        $this->errorId = $errorId;
        $this->type = $type;
        $this->errors = $errors;
        $this->schema = $schema;
    }

    public function toException(): PayloadValidationExceptionDtoThrowable
    {
        $serializer = Utils\JSON::createSerializer();
        $message = $serializer->serialize($this, 'json');
        $code = $this->statusCode;

        return new PayloadValidationExceptionDtoThrowable($message, (int) $code, $this);
    }
}