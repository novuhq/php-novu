<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace novu\Models\Components;


class DigestMetadataDto
{
    /**
     * The Digest Type
     *
     * @var DigestTypeEnum $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\DigestTypeEnum')]
    public DigestTypeEnum $type;

    /**
     * Optional key for the digest
     *
     * @var ?string $digestKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('digestKey')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $digestKey = null;

    /**
     * Amount for the digest
     *
     * @var ?float $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $amount = null;

    /**
     * Unit of the digest
     *
     * @var ?Unit $unit
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('unit')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\Unit|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Unit $unit = null;

    /**
     * Optional array of events associated with the digest, represented as key-value pairs
     *
     * @var ?array<array<string, mixed>> $events
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('events')]
    #[\Speakeasy\Serializer\Annotation\Type('array<array<string, mixed>>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $events = null;

    /**
     * Regular digest: Indicates if backoff is enabled for the regular digest
     *
     * @var ?bool $backoff
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('backoff')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $backoff = null;

    /**
     * Regular digest: Amount for backoff
     *
     * @var ?float $backoffAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('backoffAmount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $backoffAmount = null;

    /**
     * Regular digest: Unit for backoff
     *
     * @var ?DigestUnitEnum $backoffUnit
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('backoffUnit')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\DigestUnitEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?DigestUnitEnum $backoffUnit = null;

    /**
     * Regular digest: Indicates if the digest should update
     *
     * @var ?bool $updateMode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updateMode')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $updateMode = null;

    /**
     * Configuration for timed digest
     *
     * @var ?DigestTimedConfigDto $timed
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('timed')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\DigestTimedConfigDto|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?DigestTimedConfigDto $timed = null;

    /**
     * @param  DigestTypeEnum  $type
     * @param  ?string  $digestKey
     * @param  ?float  $amount
     * @param  ?Unit  $unit
     * @param  ?array<array<string, mixed>>  $events
     * @param  ?bool  $backoff
     * @param  ?float  $backoffAmount
     * @param  ?DigestUnitEnum  $backoffUnit
     * @param  ?bool  $updateMode
     * @param  ?DigestTimedConfigDto  $timed
     */
    public function __construct(DigestTypeEnum $type, ?string $digestKey = null, ?float $amount = null, ?Unit $unit = null, ?array $events = null, ?bool $backoff = null, ?float $backoffAmount = null, ?DigestUnitEnum $backoffUnit = null, ?bool $updateMode = null, ?DigestTimedConfigDto $timed = null)
    {
        $this->type = $type;
        $this->digestKey = $digestKey;
        $this->amount = $amount;
        $this->unit = $unit;
        $this->events = $events;
        $this->backoff = $backoff;
        $this->backoffAmount = $backoffAmount;
        $this->backoffUnit = $backoffUnit;
        $this->updateMode = $updateMode;
        $this->timed = $timed;
    }
}