<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace novu\Models\Components;


class TriggerEventToAllRequestDto
{
    /**
     * The trigger identifier associated for the template you wish to send. This identifier can be found on the template page.
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * The payload object is used to pass additional information that 
     *
     *     could be used to render the template, or perform routing rules based on it. 
     *       For In-App channel, payload data are also available in <Inbox />
     *
     * @var array<string, mixed> $payload
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payload')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>')]
    public array $payload;

    /**
     * This could be used to override provider specific configurations
     *
     * @var ?Overrides $overrides
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('overrides')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\Overrides|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Overrides $overrides = null;

    /**
     * A unique identifier for this transaction, we will generated a UUID if not provided.
     *
     * @var ?string $transactionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transactionId')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $transactionId = null;

    /**
     * It is used to display the Avatar of the provided actor's subscriber id or actor object.
     *
     *     If a new actor object is provided, we will create a new subscriber in our system
     *     
     *
     * @var string|SubscriberPayloadDto|null $actor
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('actor')]
    #[\Speakeasy\Serializer\Annotation\Type('string|\novu\Models\Components\SubscriberPayloadDto')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public string|SubscriberPayloadDto|null $actor = null;

    /**
     * It is used to specify a tenant context during trigger event.
     *
     *     If a new tenant object is provided, we will create a new tenant.
     *     
     *
     * @var string|TenantPayloadDto|null $tenant
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tenant')]
    #[\Speakeasy\Serializer\Annotation\Type('string|\novu\Models\Components\TenantPayloadDto')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public string|TenantPayloadDto|null $tenant = null;

    /**
     * @param  string  $name
     * @param  array<string, mixed>  $payload
     * @param  ?Overrides  $overrides
     * @param  ?string  $transactionId
     * @param  string|SubscriberPayloadDto|null  $actor
     * @param  string|TenantPayloadDto|null  $tenant
     */
    public function __construct(string $name, array $payload, ?Overrides $overrides = null, ?string $transactionId = null, string|SubscriberPayloadDto|null $actor = null, string|TenantPayloadDto|null $tenant = null)
    {
        $this->name = $name;
        $this->payload = $payload;
        $this->overrides = $overrides;
        $this->transactionId = $transactionId;
        $this->actor = $actor;
        $this->tenant = $tenant;
    }
}