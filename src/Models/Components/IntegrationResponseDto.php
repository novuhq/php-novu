<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace novu\Models\Components;


class IntegrationResponseDto
{
    /**
     * The unique identifier for the environment associated with this integration. This links to the Environment collection.
     *
     * @var string $environmentId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('_environmentId')]
    public string $environmentId;

    /**
     * The unique identifier for the organization that owns this integration. This links to the Organization collection.
     *
     * @var string $organizationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('_organizationId')]
    public string $organizationId;

    /**
     * The name of the integration, which is used to identify it in the user interface.
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * A unique string identifier for the integration, often used for API calls or internal references.
     *
     * @var string $identifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('identifier')]
    public string $identifier;

    /**
     * The identifier for the provider of the integration (e.g., "mailgun", "twilio").
     *
     * @var string $providerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('providerId')]
    public string $providerId;

    /**
     * The channel type for the integration, which defines how the integration communicates (e.g., email, SMS).
     *
     * @var IntegrationResponseDtoChannel $channel
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('channel')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\IntegrationResponseDtoChannel')]
    public IntegrationResponseDtoChannel $channel;

    /**
     * The credentials required for the integration to function, including API keys and other sensitive information.
     *
     * @var CredentialsDto $credentials
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('credentials')]
    #[\Speakeasy\Serializer\Annotation\Type('\novu\Models\Components\CredentialsDto')]
    public CredentialsDto $credentials;

    /**
     * Indicates whether the integration is currently active. An active integration will process events and messages.
     *
     * @var bool $active
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('active')]
    public bool $active;

    /**
     * Indicates whether the integration has been marked as deleted (soft delete).
     *
     * @var bool $deleted
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('deleted')]
    public bool $deleted;

    /**
     * Indicates whether this integration is marked as primary. A primary integration is often the default choice for processing.
     *
     * @var bool $primary
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('primary')]
    public bool $primary;

    /**
     * The unique identifier of the integration record in the database. This is automatically generated.
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     * The timestamp indicating when the integration was deleted. This is set when the integration is soft deleted.
     *
     * @var ?string $deletedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('deletedAt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $deletedAt = null;

    /**
     * The identifier of the user who performed the deletion of this integration. Useful for audit trails.
     *
     * @var ?string $deletedBy
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('deletedBy')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $deletedBy = null;

    /**
     * An array of conditions associated with the integration that may influence its behavior or processing logic.
     *
     * @var ?array<StepFilterDto> $conditions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('conditions')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\novu\Models\Components\StepFilterDto>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $conditions = null;

    /**
     * @param  string  $environmentId
     * @param  string  $organizationId
     * @param  string  $name
     * @param  string  $identifier
     * @param  string  $providerId
     * @param  IntegrationResponseDtoChannel  $channel
     * @param  CredentialsDto  $credentials
     * @param  bool  $active
     * @param  bool  $deleted
     * @param  bool  $primary
     * @param  ?string  $id
     * @param  ?string  $deletedAt
     * @param  ?string  $deletedBy
     * @param  ?array<StepFilterDto>  $conditions
     * @phpstan-pure
     */
    public function __construct(string $environmentId, string $organizationId, string $name, string $identifier, string $providerId, IntegrationResponseDtoChannel $channel, CredentialsDto $credentials, bool $active, bool $deleted, bool $primary, ?string $id = null, ?string $deletedAt = null, ?string $deletedBy = null, ?array $conditions = null)
    {
        $this->environmentId = $environmentId;
        $this->organizationId = $organizationId;
        $this->name = $name;
        $this->identifier = $identifier;
        $this->providerId = $providerId;
        $this->channel = $channel;
        $this->credentials = $credentials;
        $this->active = $active;
        $this->deleted = $deleted;
        $this->primary = $primary;
        $this->id = $id;
        $this->deletedAt = $deletedAt;
        $this->deletedBy = $deletedBy;
        $this->conditions = $conditions;
    }
}