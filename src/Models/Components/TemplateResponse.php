<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace novu\Models\Components;


class TemplateResponse
{
    /**
     * Unique identifier of the workflow
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('_id')]
    public string $id;

    /**
     * Name of the workflow
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
     *
     * @var bool $critical
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('critical')]
    public bool $critical;

    /**
     * Triggers are the events that will trigger the workflow.
     *
     * @var array<NotificationTriggerResponse> $triggers
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('triggers')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\novu\Models\Components\NotificationTriggerResponse>')]
    public array $triggers;

    /**
     * @param  string  $id
     * @param  string  $name
     * @param  bool  $critical
     * @param  array<NotificationTriggerResponse>  $triggers
     */
    public function __construct(string $id, string $name, bool $critical, array $triggers)
    {
        $this->id = $id;
        $this->name = $name;
        $this->critical = $critical;
        $this->triggers = $triggers;
    }
}